package ch.addere.vulnlog.cli.suppressions

import ch.addere.vulnlog.core.model.vulnerability.VlVulnerability
import java.io.File

abstract class Suppressor(private val suppressionFileTemplate: File) {
    protected abstract val vulnLogMarker: Regex
    protected abstract val vulnLogTemplateMarker: Regex
    protected abstract val suppressionBlockTemplate: String
    protected abstract val outputfileName: String

    init {
        require(suppressionFileTemplate.isFile) { "suppressionFileTemplate must be a file" }
    }

    fun createSuppressions(vulnerabilities: Set<VlVulnerability>): SuppressionComposition {
        val filtered: Set<VlVulnerability> = filterRelevant(vulnerabilities)
        val suppressionBlocks: Set<SuppressionBlock> = transform(filtered)
        return generateSuppressionComposition(suppressionBlocks)
    }

    protected abstract fun filterRelevant(vulnerabilities: Set<VlVulnerability>): Set<VlVulnerability>

    protected abstract fun transform(filtered: Set<VlVulnerability>): Set<SuppressionBlock>

    private fun generateSuppressionComposition(suppressionBlocks: Set<SuppressionBlock>): SuppressionComposition {
        val head = mutableListOf<String>()
        val tail = mutableListOf<String>()
        var baseIndentation = ""
        var readIntoHead = true

        suppressionFileTemplate.useLines { allLines ->
            allLines.forEach { line ->
                when {
                    line.contains(vulnLogTemplateMarker) -> {
                        val autoGeneratedStringInformation = replaceTemplateInformationWithAutoGenInformation(line)
                        head.add(autoGeneratedStringInformation)
                    }

                    line.contains(vulnLogMarker) -> {
                        baseIndentation = preserveIndentation(line)
                        readIntoHead = false
                    }

                    readIntoHead -> head.add(line)
                    !readIntoHead -> tail.add(line)
                }
            }
        }
        return SuppressionComposition(outputfileName, baseIndentation, head, tail, suppressionBlocks)
    }

    private fun replaceTemplateInformationWithAutoGenInformation(line: String): String {
        return "\\w+ (\\w+ ?)+\\w+".toRegex().replace(line, "This file is auto generated by VulnLog")
    }

    private fun preserveIndentation(line: String): String {
        val (indentation, _) = "(\\s+)".toRegex().find(line)!!.destructured
        return indentation
    }
}
