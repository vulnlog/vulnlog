package dev.vulnlog.suppression

import dev.vulnlog.common.SuppressionExecution
import dev.vulnlog.dsl.ReleaseBranchData
import dev.vulnlog.dsl.ResultStatus
import dev.vulnlog.dsl.VlReporter
import java.time.LocalDate

data class MapperInput(
    val releaseBranch: ReleaseBranchData,
    val reporterToVulns: Map<VlReporter, List<SuppressVulnerability>>,
)

/**
 * Service responsible for mapping and identifying relevant vulnerabilities for suppression.
 *
 * This service processes a list of input data that contains vulnerabilities grouped by release branches
 * and reporters, filters out the vulnerabilities that do not meet suppression criteria, and returns a set
 * of mapped vulnerabilities that are deemed relevant for suppression.
 *
 * The filtering logic includes checking specific vulnerability attributes such as suppression type,
 * status, and the suppression validity period.
 */
class SuppressionVulnerabilityMapperService {
    /**
     * Maps input data containing vulnerabilities grouped by release branch and reporter to a set of relevant
     * vulnerabilities for suppression. The method filters out vulnerabilities that do not meet specific criteria and
     * returns a structured result.
     *
     * @param mapperInput A list of input data, where each entry contains a release branch and a mapping of reporter to
     * associated vulnerabilities.
     * @return A set of relevant vulnerabilities grouped by release branch and reporter, filtered to include only those
     * suitable for suppression processing.
     */
    fun mapToRelevantVulnerabilities(mapperInput: List<MapperInput>): Set<VulnsPerBranchAndRecord> {
        return mapperInput
            .flatMap { (branch, reporterToVulns) ->
                reporterToVulns.map { (reporter, vulns) ->
                    val relevantToSuppress = relevantToSuppress(vulns)
                    VulnsPerBranchAndRecord(branch, reporter, relevantToSuppress)
                }
            }
            .filter { it.vuln.isNotEmpty() }
            .toSet()
    }

    private fun relevantToSuppress(vulns: List<SuppressVulnerability>) =
        vulns
            .filter { it.suppressType is SuppressionExecution }
            .filter(::filterRelevant)
            .toSet()

    private fun filterRelevant(vuln: SuppressVulnerability): Boolean {
        val isAffected = vuln.status == ResultStatus.AFFECTED
        val isSuppressed = vuln.suppressType != null
        val isActiveSuppressed = (vuln.suppressionEnd?.let { it > LocalDate.now() } ?: true)
        return isAffected && isSuppressed && isActiveSuppressed
    }
}
