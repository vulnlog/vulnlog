package dev.vulnlog.dslinterpreter.repository

import dev.vulnlog.dsl.VulnerabilityData

interface VulnerabilityDataRepository {
    /**
     * Checks whether the repository contains any data.
     *
     * @return `true` if the repository is empty, `false` otherwise.
     */
    fun isEmpty(): Boolean

    /**
     * Adds a new vulnerability data entry to the repository.
     *
     * @param data The vulnerability data to be added, containing details such as IDs,
     * associated report data, analysis data, task data, execution data, and involved release versions.
     */
    fun add(data: VulnerabilityData)

    /**
     * Retrieves a list of all vulnerabilities stored in the repository.
     *
     * @return A list of {@link VulnerabilityData} objects, each representing a specific vulnerability,
     * including details about IDs, report data, analysis data, task data, execution data, and
     * associated release versions.
     */
    fun getVulnerabilities(): List<VulnerabilityData>
}

class VulnerabilityDataRepositoryImpl : VulnerabilityDataRepository {
    private val vulnerabilityDataRepository = mutableListOf<VulnerabilityData>()

    override fun isEmpty(): Boolean {
        return vulnerabilityDataRepository.isEmpty()
    }

    override fun add(data: VulnerabilityData) {
        vulnerabilityDataRepository.add(data)
    }

    override fun getVulnerabilities(): List<VulnerabilityData> {
        return vulnerabilityDataRepository.toList()
    }
}
