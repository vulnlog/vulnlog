package dev.vulnlog.dslinterpreter.impl

import dev.vulnlog.common.repository.VulnerabilityDataRepository
import dev.vulnlog.dsl.VlVulnerabilityContext
import dev.vulnlog.dsl.VlVulnerabilityDslRoot
import dev.vulnlog.dslinterpreter.service.VulnerabilityService
import dev.vulnlog.dslinterpreter.service.VulnerabilityServiceInputData

class VlVulnerabilityDslRootImpl(
    private val vulnerabilityService: VulnerabilityService,
    private val vulnerabilityDataRepository: VulnerabilityDataRepository,
) : VlVulnerabilityDslRoot {
    override fun vuln(
        id: String,
        block: VlVulnerabilityContext.() -> Unit,
    ) {
        addVulnEntryIntoRepository(listOf(id), block)
    }

    override fun vuln(
        vararg id: String,
        block: VlVulnerabilityContext.() -> Unit,
    ) {
        addVulnEntryIntoRepository(id.toList(), block)
    }

    private fun addVulnEntryIntoRepository(
        id: List<String>,
        block: VlVulnerabilityContext.() -> Unit,
    ) = with(VlVulnerabilityContextImpl()) {
        block()

        val dslReportData: DslReportData = aBuilder.value.dslReportData
        val dslAnalysisData: DslAnalysisData = tBuilder.value.dslAnalysisData
        val dslTaskData: DslTaskData = eBuilder.value.dslTaskData
        val dslExecutionData: DslExecutionData = eBuilder.value.build()

        val serviceInput =
            VulnerabilityServiceInputData(
                id,
                dslReportData,
                dslAnalysisData,
                dslTaskData,
                dslExecutionData,
            )
        val vulnEntry = vulnerabilityService.createVulnerability(serviceInput)
        vulnerabilityDataRepository.add(vulnEntry)
    }
}
