package dev.vulnlog.dslinterpreter.impl

import dev.vulnlog.dsl.VlVulnerabilityContext
import dev.vulnlog.dsl.VlVulnerabilityDslRoot
import dev.vulnlog.dsl.VulnerabilityData
import dev.vulnlog.dslinterpreter.service.VulnerabilityService
import dev.vulnlog.dslinterpreter.service.VulnerabilityServiceInputData

class VlVulnerabilityDslRootImpl(private val vulnerabilityService: VulnerabilityService) : VlVulnerabilityDslRoot {
    override fun vuln(
        id: String,
        block: VlVulnerabilityContext.() -> Unit,
    ): VulnerabilityData = createVulnlogData(listOf(id), block)

    override fun vuln(
        vararg id: String,
        block: VlVulnerabilityContext.() -> Unit,
    ): VulnerabilityData = createVulnlogData(id.toList(), block)

    private fun createVulnlogData(
        id: List<String>,
        block: VlVulnerabilityContext.() -> Unit,
    ): VulnerabilityData =
        with(VlVulnerabilityContextImpl()) {
            block()

            val dslReportData: DslReportData = aBuilder.value.dslReportData
            val dslAnalysisData: DslAnalysisData = tBuilder.value.dslAnalysisData
            val dslTaskData: DslTaskData = eBuilder.value.dslTaskData
            val dslExecutionData: DslExecutionData = eBuilder.value.build()

            val serviceInput =
                VulnerabilityServiceInputData(
                    id,
                    dslReportData,
                    dslAnalysisData,
                    dslTaskData,
                    dslExecutionData,
                )
            return vulnerabilityService.createVulnerability(serviceInput)
        }
}
