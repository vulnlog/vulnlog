package io.vulnlog.dsl2

interface VlVulnerabilityContext {
    /**
     * The report refers to this variant and the specified versions.
     */
    var reportFor: VlReportFor?

    /**
     * The vulnerability was reported by these reporters.
     */
    var reportBy: VlReportBy?

    /**
     * Rating of the vulnerability after analysing it against the product variant and version.
     */
    var rating: VlRating?

    /**
     * The action required to do in order to fix the reported vulnerability.
     */
    var toFix: VlFixAction?

    /**
     * The upcoming product versions a fix for this vulnerability is planned.
     */
    var fixIn: Set<VlVersion>

    /**
     * Define product variant and versions the vulnerability is reported for.
     *
     * @param variant of the product
     * @param versions of the product
     * @return variant and version the vulnerability report addresses.
     */
    fun reportFor(
        variant: VlVariant,
        vararg versions: VlVersion,
    ): VlReportFor

    /**
     * Define the reporters found the vulnerability.
     *
     * @param reporters which found the vulnerability.
     * @return reporters found the vulnerability.
     */
    fun reportBy(vararg reporters: VlReporter): VlReportBy

    /**
     * Vulnerability has a critical impact on the product.
     *
     * @param dateOfAnalysing use the format YYYY-MM-dd to specify.
     * @param reasoning justifying the rating.
     */
    fun critical(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRating

    /**
     * Vulnerability has a high impact on the product.
     *
     * @param dateOfAnalysing use the format YYYY-MM-dd to specify.
     * @param reasoning justifying the rating.
     */
    fun high(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRating

    /**
     * Vulnerability has a moderate impact on the product.
     *
     * @param dateOfAnalysing use the format YYYY-MM-dd to specify.
     * @param reasoning justifying the rating.
     */
    fun moderate(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRating

    /**
     * Vulnerability has a low impact on the product.
     *
     * @param dateOfAnalysing use the format YYYY-MM-dd to specify.
     * @param reasoning justifying the rating.
     */
    fun low(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRating

    /**
     * Vulnerability has no impact on the product.
     *
     * @param dateOfAnalysing use the format YYYY-MM-dd to specify.
     * @param reasoning justifying the rating.
     */
    fun none(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRating

    /**
     * Update the specified dependency.
     */
    fun update(dependency: String): VlFixActionTargetVersionBuilder

    /**
     * Remove the specified dependency.
     */
    fun remove(dependency: String): VlFixAction

    /**
     * Replace the specified dependency.
     */
    fun replace(dependency: String): VlFixActionTargetDependencyBuilder

    /**
     * Specify exactly one version per product branch that fixes the reported vulnerability.
     */
    fun fixIn(vararg versions: VlVersion): Set<VlVersion>

    /**
     * Apply an action for the vulnerability.
     *
     * @receiver context describing the vulnerability.
     * @return action to apply for this vulnerability.
     */
    fun action(context: VlActionContext.() -> Unit): VlAction
}
