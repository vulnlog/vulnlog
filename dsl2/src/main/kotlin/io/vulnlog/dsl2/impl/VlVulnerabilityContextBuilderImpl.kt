package io.vulnlog.dsl2.impl

import io.vulnlog.dsl2.VlActionContext
import io.vulnlog.dsl2.VlFixActionTargetDependencyBuilder
import io.vulnlog.dsl2.VlFixActionTargetVersionBuilder
import io.vulnlog.dsl2.VlFixActionValue
import io.vulnlog.dsl2.VlOverwriteBuilder
import io.vulnlog.dsl2.VlRatingValue
import io.vulnlog.dsl2.VlReleaseValue
import io.vulnlog.dsl2.VlReportByValue
import io.vulnlog.dsl2.VlReportForValue
import io.vulnlog.dsl2.VlReporterValue
import io.vulnlog.dsl2.VlVariantValue
import io.vulnlog.dsl2.VlVulnerabilityContextBuilder
import java.time.LocalDate

@Suppress("TooManyFunctions")
class VlVulnerabilityContextBuilderImpl : VlVulnerabilityContextBuilder {
    override var reportFor: Set<VlReportForValue> = emptySet()
    override var reportBy: Set<VlReportByValue> = emptySet()
    override var rating: VlRatingValue? = null
    override var toFix: VlFixActionValue? = null
    override var fixIn: Set<VlReleaseValue> = emptySet()

    private val actionContext: MutableList<VlActionContext> = mutableListOf()

    override fun reportFor(
        variant: VlVariantValue,
        vararg versions: VlReleaseValue,
    ): Set<VlReportForValue> = versions.map { VlReportForValueImpl(variant, it) }.toSet()

    override fun reportBy(vararg reporters: VlReporterValue): Set<VlReportByValue> =
        reporters
            .map { VlReportByValueImpl(it.name) }
            .toSet()

    override fun critical(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRatingValue {
        val parsedDateOfAnalysing: LocalDate = LocalDate.parse(dateOfAnalysing)
        return VlCriticalRatingValueImpl(parsedDateOfAnalysing, reasoning)
    }

    override fun high(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRatingValue {
        val parsedDateOfAnalysing: LocalDate = LocalDate.parse(dateOfAnalysing)
        return VlHighRatingValueImpl(parsedDateOfAnalysing, reasoning)
    }

    override fun moderate(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRatingValue {
        val parsedDateOfAnalysing: LocalDate = LocalDate.parse(dateOfAnalysing)
        return VlModerateRatingValueImpl(parsedDateOfAnalysing, reasoning)
    }

    override fun low(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRatingValue {
        val parsedDateOfAnalysing: LocalDate = LocalDate.parse(dateOfAnalysing)
        return VlLowRatingValueImpl(parsedDateOfAnalysing, reasoning)
    }

    override fun notAffected(
        dateOfAnalysing: String,
        reasoning: String,
    ): VlRatingValue {
        val parsedDateOfAnalysing: LocalDate = LocalDate.parse(dateOfAnalysing)
        return VlNotAffectedRatingValueImpl(parsedDateOfAnalysing, reasoning)
    }

    override fun update(dependency: String): VlFixActionTargetVersionBuilder =
        VlFixActionTargetVersionBuilderImpl("update")

    override fun remove(dependency: String): VlFixActionValue = VlFixActionValueImpl("remove $dependency")

    override fun replace(dependency: String): VlFixActionTargetDependencyBuilder =
        VlFixActionTargetDependencyBuilderImpl("replace")

    override fun fixIn(vararg versions: VlReleaseValue): Set<VlReleaseValue> = versions.toSet()

    override fun action(context: VlActionContext.() -> Unit) =
        with(VlActionContextImpl()) {
            context()
            this@VlVulnerabilityContextBuilderImpl.actionContext += this
        }

    override fun overwrite(
        variant: VlVariantValue,
        vararg versions: VlReleaseValue,
    ): VlOverwriteBuilder = VlOverwriteBuilderImpl()
}
