package io.vulnlog.dsl

import io.kotest.core.spec.style.FunSpec
import io.kotest.matchers.collections.shouldContainExactly
import io.vulnlog.core.model.reporter.VlGenericReporter
import io.vulnlog.core.model.reporter.VlOwaspReporter
import io.vulnlog.core.model.reporter.VlSnykReporter
import io.vulnlog.core.model.version.VlAffectedVersionSet
import io.vulnlog.core.model.version.VlVersion

class VlVulnerabilityBlockTest :
    FunSpec({

        test("test distinct generic reporter types") {
            val block = VlVulnerabilityBlock()

            block.affectedVersions(VlVersion("version1"))
            block.affectedVersions(VlVersion("version2"))

            block.reporters() shouldContainExactly genericReporter("version1")
        }

        test("test distinct Owasp reporter types") {
            val block = VlVulnerabilityBlock()

            block.owasp(VlVersion("version1"))
            block.owasp(VlVersion("version2"))

            block.reporters() shouldContainExactly owaspReporter("version1")
        }

        test("test distinct Snyk reporter types") {
            val block = VlVulnerabilityBlock()

            block.snyk("snykId1", VlVersion("version1"))
            block.snyk("snykId2", VlVersion("version2"))

            block.reporters() shouldContainExactly snykReporter("snykId1", "version1")
        }
    })

private fun genericReporter(version: String): Set<VlGenericReporter> =
    setOf(VlGenericReporter(VlAffectedVersionSet(setOf(VlVersion(version)))))

private fun owaspReporter(version: String): Set<VlOwaspReporter> {
    return setOf(VlOwaspReporter(VlAffectedVersionSet(setOf(VlVersion(version)))))
}

private fun snykReporter(
    id: String,
    version: String,
): Set<VlSnykReporter> = setOf(VlSnykReporter(id, VlAffectedVersionSet(setOf(VlVersion(version)))))
