package ch.addere.vulnlog.dsl

import ch.addere.vulnlog.core.model.reporter.VlReporter
import ch.addere.vulnlog.core.model.resolution.VlFixInResolution
import ch.addere.vulnlog.core.model.resolution.VlMitigateResolution
import ch.addere.vulnlog.core.model.resolution.VlResolutionVersionSet
import ch.addere.vulnlog.core.model.resolution.VlSuppressResolution
import ch.addere.vulnlog.core.model.version.VlVersion

class VlVulnerabilityBlock :
    VlStructure(),
    VlReport {
    private var reporters: VlReporters = VlReporters()
    var fixedInVersions: VlFixInResolution? = null
    var mitigateVersions: VlMitigateResolution? = null
    var suppressVersions: VlSuppressResolution? = null

    fun reporters(): Set<VlReporter> = reporters.typeReportMap.values.toSet()

    fun fixIn(
        vararg version: VlVersion,
        rationale: String = "",
    ) {
        val resolutionVersionSet = VlResolutionVersionSet(version.toSet())
        fixedInVersions = VlFixInResolution(resolutionVersionSet, rationale)
    }

    fun suppress(
        vararg version: VlVersion,
        rationale: String = "",
    ) {
        val resolutionVersionSet = VlResolutionVersionSet(version.toSet())
        suppressVersions = VlSuppressResolution(resolutionVersionSet, rationale)
    }

    fun mitigate(
        vararg version: VlVersion,
        rationale: String = "",
    ) {
        val resolutionVersionSet = VlResolutionVersionSet(version.toSet())
        mitigateVersions = VlMitigateResolution(resolutionVersionSet, rationale)
    }

    override fun affectedVersions(vararg affectedVersions: VlVersion) {
        reporters += DslGenericReporter(*affectedVersions).createReporter()
    }

    override fun owasp(vararg affectedVersions: VlVersion) {
        reporters += DslOwaspReporter(*affectedVersions).createReporter()
    }

    override fun snyk(
        snykId: String,
        vararg affectedVersions: VlVersion,
        init: (VlSnykBlock.() -> Unit)?,
    ) {
        reporters += DslSnykReporter(snykId, *affectedVersions, init = init).createReporter()
    }
}

private class VlReporters {
    val typeReportMap = mutableMapOf<String, VlReporter>()

    operator fun plusAssign(reporter: VlReporter) {
        if (typeReportMap[reporter.name] == null) {
            typeReportMap[reporter.name] = reporter
        }
    }
}
