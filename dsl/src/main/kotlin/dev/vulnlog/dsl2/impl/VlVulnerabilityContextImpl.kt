package dev.vulnlog.dsl2.impl

import dev.vulnlog.dsl2.MyAnalysis
import dev.vulnlog.dsl2.MyReport
import dev.vulnlog.dsl2.MyResolution
import dev.vulnlog.dsl2.MyTaskPlan
import dev.vulnlog.dsl2.Task
import dev.vulnlog.dsl2.VlPlan2
import dev.vulnlog.dsl2.VlReportFor
import dev.vulnlog.dsl2.VlReportForContext
import dev.vulnlog.dsl2.VlResolutionTask
import dev.vulnlog.dsl2.VlVuln
import dev.vulnlog.dsl2.VlVulnerabilityIdentifier
import dev.vulnlog.dsl2.VlVulnerabilityRateContext

class VlVulnerabilityContextImpl(private val ids: List<VlVulnerabilityIdentifier>) : VlVulnerabilityContextBuilder {
    private val reportedForReleases: MutableList<VlReportFor> = mutableListOf()
    private val analysisFor: MutableList<VlVulnerabilityRateContext> = mutableListOf()
    private val resolutionTasks: MutableList<VlResolutionTask> = mutableListOf()
    private val taskPlans: MutableList<VlPlan2> = mutableListOf()

    override fun report(reportedFor: VlReportForContext): MyReport {
        val report = (reportedFor as VlReportForContextBuilder).build()
        reportedForReleases.add(report)
        return { report }
    }

    override fun report(vararg reportedFor: VlReportForContext): Array<MyReport> {
        val reports = reportedFor.filterIsInstance<VlReportForContextBuilder>().map(VlReportForContextBuilder::build)
        reportedForReleases.addAll(reports)
        return reports.map { { it } }.toTypedArray()
    }

    override fun analyse(ratings: VlVulnerabilityRateContext): MyAnalysis {
        analysisFor.add(ratings)
        return { ratings }
    }

    override fun analyse(vararg ratings: VlVulnerabilityRateContext): Array<MyAnalysis> {
        analysisFor.addAll(ratings)
        return ratings.map { { it } }.toTypedArray()
    }

    override fun resolution(resolutions: MyResolution): Task {
        val resolutionTask =
            VlResolutionTask(
                resolutions.resolutionTask,
                resolutions.version,
                resolutions.releaseBranches,
            )
        resolutionTasks.add(resolutionTask)
        return { resolutionTask }
    }

    override fun resolution(vararg resolutions: MyResolution): Array<Task> {
        val tasks = resolutions.map { VlResolutionTask(it.resolutionTask, it.version, it.releaseBranches) }
        resolutionTasks.addAll(tasks)
        return tasks.map { { it } }.toTypedArray()
    }

    override fun plan(task: MyTaskPlan) {
        val plan = VlPlan2(task.resolution, task.taskAction)
        taskPlans.add(plan)
    }

    override fun plan(vararg tasks: MyTaskPlan) {
        val plans = tasks.map { VlPlan2(it.resolution, it.taskAction) }
        taskPlans.addAll(plans)
    }

    override fun build() = VlVuln(ids, reportedForReleases, analysisFor, resolutionTasks, taskPlans)
}
