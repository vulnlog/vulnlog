package dev.vulnlog.common

import dev.vulnlog.dsl.InvolvedReleaseVersion
import dev.vulnlog.dsl.ReleaseBranchData
import dev.vulnlog.dsl.ResultStatus
import dev.vulnlog.dsl.TaskAction
import dev.vulnlog.dsl.VlReporter
import dev.vulnlog.dsl.VlVerdict
import java.time.LocalDate

data class VulnerabilityDataPerBranch(
    val branch: ReleaseBranchData,
    val ids: List<String>,
    val status: ResultStatus = ResultStatus.UNKNOWN,
    val reportData: ReportDataPerBranch,
    val analysisData: AnalysisDataPerBranch? = null,
    val taskData: TaskDataPerBranch? = null,
    val executionData: ExecutionDataPerBranch? = null,
    val involvedReleaseVersions: InvolvedReleaseVersion? = null,
)

data class ReportDataPerBranch(
    val reporters: Set<VlReporter>,
    val awareAt: LocalDate,
)

data class AnalysisDataPerBranch(
    val analysedAt: LocalDate,
    val verdict: VlVerdict,
    val reasoning: String,
)

data class TaskDataPerBranch(
    val taskAction: TaskAction,
)

data class ExecutionDataPerBranch(
    val execution: ExecutionPerBranch,
)

sealed interface ExecutionPerBranch {
    val action: String
}

sealed interface SuppressionExecution : ExecutionPerBranch {
    val suppressUntilDate: LocalDate?
}

data class FixedExecutionPerBranch(
    override val action: String = "fix",
    val fixDate: LocalDate,
) : ExecutionPerBranch

object SuppressionPermanentExecutionPerBranch : SuppressionExecution {
    override val suppressUntilDate: LocalDate? = null
    override val action: String = "suppress permanent"
}

data class SuppressionDateExecutionPerBranch(override val suppressUntilDate: LocalDate) : SuppressionExecution {
    override val action: String = "suppress temporarily"
}

data class SuppressionEventExecutionPerBranch(override val suppressUntilDate: LocalDate?) : SuppressionExecution {
    override val action: String = "suppress event based"
}
